#!/usr/bin/python2

# inf0junki3, 2016.
# This is a quick script to set yourself up for wifi snooping. I use it during mobile pentests to 
# quickly enable/disable MITM conditions.
# *Prerequisites:* iptables, dnsmasq, and hostapd. I have provided sample basic config files.
# IMPORTANT: if you do use the basic config files, GO OVER THEM AND CUSTOMIZE AT LEAST THE SSID AND
# PASSWORD FIRST.
# Final "heads-up" - I'm not doing any input sanitization here, careful what you put in the config
# files and what you pass as arguments.

import          argparse
from os import  geteuid
import          sys
from os import  system
import          signal

DEFAULT_GATEWAY     = "10.10.50.1"
DEFAULT_WIFI        = "wlan0"
DEFAULT_WIRED       = "eth0"
DNSMASQ_BIN         = "/usr/sbin/dnsmasq"
HOSTAPD_BIN         = "/usr/sbin/hostapd"

parser = argparse.ArgumentParser(description = "Enable / Disable wifi snooping.")
parser.add_argument("dnsmasq_file", help="[Required] Full path to dnsmasq.conf")
parser.add_argument("hostapd_file", help="[Required] Full path to hostapd.conf")
parser.add_argument("--gateway", help="[Optional] wifi interface. Default: 10.10.50.1",
                    default = DEFAULT_GATEWAY) 
parser.add_argument("--wifi_if", help="[Optional] wifi interface. Default: wlan0",
                    default = DEFAULT_WIFI) 
parser.add_argument("--wire_if", help="[Optional] wired interface. Default: eth0",
                    default = DEFAULT_WIRED) 
parser.add_argument("--redirect_http_port", help="[Optional] Redirect HTTP traffic to proxy. Default: None",
                    default = None) 

def run_commands(commands):
    for command in commands:
        system(command)

def setup(dnsmasq_file, 
          hostapd_file, 
          gateway, 
          wifi_if, 
          wired_if,
          redirect_http_port):
    commands = ["service network-manager stop",
                "{0} -C {1} &".format(DNSMASQ_BIN, dnsmasq_file),
                "sysctl net.ipv4.ip_forward=1",
                "iptables -A FORWARD -i {0} -o {1} -j ACCEPT".format(wifi_if, wired_if),
                "iptables -t nat -A POSTROUTING -o {0} -j MASQUERADE".format(wired_if),
                "ip addr add {0}/24 dev {1}".format(gateway, wifi_if),
                "{0} {1} &".format(HOSTAPD_BIN, hostapd_file)]
    if redirect_http_port is not None:
        redir_http = "iptables -t nat -A PREROUTING -p tcp -i {0} --dport 80:443 -j REDIRECT --to-ports {1}"
        commands.append(redir_http.format(wifi_if, redirect_http_port))
    run_commands(commands)
    print("Setup done. Press Ctrl + C to tear down.")

def teardown(dnsmasq_file,                                                                             
             hostapd_file,                                                                             
             gateway,                                                                                  
             wifi_if,                                                                                  
             wired_if,
             redirect_http_port):
    commands = ["killall dnsmasq".format(DNSMASQ_BIN, dnsmasq_file),
                "sysctl net.ipv4.ip_forward=0",
                "iptables -D FORWARD -i {0} -o {1} -j ACCEPT".format(wifi_if, wired_if),
                "iptables -t nat -D POSTROUTING -o {0} -j MASQUERADE".format(wired_if),
                "ip addr del {0}/24 dev {1}".format(gateway, wifi_if),
                "killall hostapd".format(HOSTAPD_BIN, hostapd_file)]
    if redirect_http_port is not None:
        redir_http = "iptables -t nat -D PREROUTING -p tcp -i {0} --dport 80:443 -j REDIRECT --to-ports {1}"
        commands.append(redir_http.format(wifi_if, redirect_http_port))
    run_commands(commands)

def teardown_handler(signal, frame):
    print("\nTearing down settings.")
    teardown(args.dnsmasq_file, 
             args.hostapd_file, 
             args.gateway, 
             args.wifi_if,
             args.wire_if,
             args.redirect_http_port)
    print("Tear down done. Exiting.")
    sys.exit(0)

#MAIN:
if __name__ == "__main__":
    if geteuid() != 0:
        print("You must be root to run this script. Exiting.")
        sys.exit(1)
    args = parser.parse_args()
    setup(args.dnsmasq_file, 
          args.hostapd_file,
          args.gateway, 
          args.wifi_if, 
          args.wire_if,
          args.redirect_http_port)
    signal.signal(signal.SIGINT, teardown_handler)
    signal.pause()
