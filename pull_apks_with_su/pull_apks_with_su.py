#!/usr/bin/python2

# Ever pentested a mobile app with multiple components? This script pulls packages from a phone with 
# su, by using tar. It also gets package info and prints it out to screen.
# *Prerequisites:* su (on android device), tar (on android device), drozer, adb, pwntools.

import                  argparse
from termcolor import   colored
from collections import namedtuple
import                  os
from pprint import      pprint
from                    pwn import *
from time import        sleep

parser = argparse.ArgumentParser(description = "Extract android APK's by keyword.")
parser.add_argument("-k", "--keywords", 
                    help  = "[Required] list of space-separated keywords, i.e. pull_apks_with_su -k google android",
                    nargs = "+",
                    required = True)
parser.add_argument("--busybox_path",
                    help = "[Optional] The absolute path to busybox, if necessary.",
                    default = "busybox")

PackageInfo = namedtuple("PackageInfo", "name data_directory permissions uid gid raw")

def _parse_info(pkg_name, package_info):
    parsed_info = {}

    lines = package_info.split("\n")
    data_directory = [line for line in lines if "Data Directory: " in line][0].split(": ")[-1]
    permissions = [line[4:] for line in lines if line.startswith("- ")]
    uid = [line[6:] for line in lines if line.startswith("  UID: ")]
    gid = [line[6:] for line in lines if line.startswith("  GID: ")]
    return PackageInfo(name = pkg_name, 
                       data_directory = data_directory,
                       permissions = permissions,
                       uid = uid,
                       gid = gid,
                       raw = package_info)
    

def get_package_info(keywords, verbose = True):
    log.info("Retrieving relevant packages.")
    drozer = process(["drozer", "console", "connect", "--command", "run app.package.list"])
    packages_raw = drozer.recvall()
    drozer.close()
    
    #FIXME: because it's mooooooooche.
    print keywords
    matching_packages = [pkg for pkg in packages_raw.split("\n") 
                            if any(keyword in pkg for keyword in keywords)]
    
    packages = {}
    for pkg in matching_packages:
        separator           = pkg.find(" ")
        package_name        = pkg[:separator]
        package_description = pkg[separator:]
        packages[package_name] = package_description
    
    log.info("Retrieving package info")
    package_info = {}
    for pkg in packages.keys():
        drozer = process(["drozer", 
                          "console", 
                          "connect", 
                          "--command", 
                          "run app.package.info -a {}".format(pkg)])
        sleep(1)
        result = drozer.recvall()
        package_info[pkg] = _parse_info(pkg, result)
        drozer.close()
    
    if verbose:    
        print colored("PACKAGE INFORMATION", "red")
        for pkg_name, pkg_object in package_info.iteritems():
            pkg_text = pkg_object.raw
            print colored(pkg_name, "green")
            pkg_lines = pkg_text.split("\n")[1:]
            for pkg_line in pkg_lines:
                color = "blue"
                if "permission" in pkg_line.lower():
                    color = "cyan"
                elif "ID" in pkg_line:
                    color = "yellow"
                elif "Data Directory" in pkg_line:
                    color = "white"
                print colored(pkg_line, color)
        
    return package_info

def get_data_files(keywords, verbose = True, package_info = None, busybox_path = "busybox"):
    if package_info is None:
        package_info = get_package_info(verbose = False)
    for cur_package_name, cur_package in package_info.iteritems():
        log.info("Downloading files for {}".format(cur_package.name))
        os.mkdir(cur_package_name)
        os.chdir(cur_package_name)        
        os.system("adb shell 'su -c \"{} tar -zcvf {1} {0};chmod 777 {1}\"'".format(
                     busybox_path,
                     cur_package.data_directory, 
                     "/data/data/{}.tar.gz".format(cur_package_name)))
        os.system("adb pull /data/data/{}.tar.gz".format(cur_package_name))
        os.system("adb shell 'su -c \"rm /data/data{}.tar.gz\"'".format(cur_package_name))
        os.chdir("..")

if __name__ == "__main__":
    print(colored("""If you are not getting any results, please check the following:
- Make sure you can connect via adb
- Make sure you have drozer on your Android device
- Make sure you have busybox on your Android device, with tar built-in
- Make sure you have su on your Android device
- Run adb forward tcp:31415 tcp:31415 (for drozer agent)""", "red"))

    args = parser.parse_args()
    a = get_package_info(args.keywords)
    get_data_files(args.keywords, package_info = a, busybox_path = args.busybox_path)
