#!/usr/bin/python2

# inf0junki3, 2016.
# This script parses an nmap xml output into something a little easier to use in Excel. As the
# script indicates, it makes it easier to batch process nmap scans that have performed banner 
# grabs.
# The script pre-supposes that you've run something like "nmap -oX [targets] --script http-headers".
# It returns an xml file with the address, port, and banner, e.g.:
# <banners>
#     <banner_entry>
#         <addr>127.0.0.1</addr>
#         <port>23</port>
#         <banner>Welcome to my telnet gateway...</banner>
#     </banner_entry>
# </banners>
import                          argparse
from bs4 import                 BeautifulSoup
import xml.etree.ElementTree as ElementTree

parser = argparse.ArgumentParser(description = "Simplifies the format of nmap banner grab output.")
parser.add_argument("input_file", help="[Required] Path to your nmap xml file.")
parser.add_argument("output_file", help="[Required] Path to the simplified output xml file.")
args = parser.parse_args()

nmap_soup = None
with open(args.input_file, "r") as nmap_banners:
    nmap_soup = BeautifulSoup(nmap_banners.read())

root = ElementTree.Element("banners")

for cur_host in nmap_soup.find_all("host"):
    cur_addr = cur_host.address["addr"]
    ports = cur_host.find_all("port")
    for cur_port in ports:
        scripts = cur_port.find_all("script")
        for script in scripts:
            banner = ElementTree.SubElement(root, "banner_entry")
            ElementTree.SubElement(banner, "addr").text = cur_addr
            ElementTree.SubElement(banner, "port").text = cur_port["portid"]
            ElementTree.SubElement(banner, "banner").text = script["output"]

tree = ElementTree.ElementTree(root)
tree.write(args.output_file)
