#!/usr/bin/python2

# Deploys peda temporarily to your machine (local or remote), runs gdb with it.

import  argparse
import  os
from    pwn import *
import  requests

PEDA_URL = "https://github.com/longld/peda/raw/master/peda.py"
DEFAULT_PATH = "/tmp/peda.py"

parser = argparse.ArgumentParser(description = "Deploys peda temporarily to your machine, runs gdb with it.")
parser.add_argument("-t", "--target",
                    help = "[Required] Target binary",
                    required = True)
parser.add_argument("-u", "--url", 
                    help = "[Optional] URL for peda. Default: {}".format(PEDA_URL), 
                    default = PEDA_URL)
parser.add_argument("-p", "--path",
                    help = "[Optional] Destination path of the file. Default:{}".format(DEFAULT_PATH),
                    default = DEFAULT_PATH)

def deploy_peda(source_url, dest_file, ssh_connection = None):
    resp = requests.get(source_url, stream = True)
    local_file_name = "local_peda.py"
    with open(local_file_name, "wb") as local_file:
        for chunk in resp.iter_content(chunk_size = 1024):
            if chunk:
                local_file.write(chunk)
    if ssh_connection is None:
        os.rename(local_file_name, dest_file)
    else:
        ssh_connection.upload_file(local_file_name, remote = dest_file)

def run_gdb(dest_file, target_binary, ssh_connection = None):
    if ssh_connection is None:
        cur_tube = process(["gdb", target_binary])
    else:
        cur_tube = ssh_connection.run(["gdb", target_binary])
    cur_tube.sendline("source {}".format(dest_file))
    return cur_tube

if __name__ == "__main__":
    args = parser.parse_args()
    deploy_peda(args.url, args.path)
    gtube = run_gdb(args.path, args.target)
    gtube.interactive()
